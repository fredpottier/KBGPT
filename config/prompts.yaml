version: "2024-09-23-megaparse"
families:
  default:
    deck:
      id: "deck_default_v1"
      template: |
        You are given a global text summary from a PowerPoint slide deck.

        Return a single JSON object with two fields:
        - "summary": a concise thematic summary (3-5 sentences) of the deck's main purpose and intended audience.
        - "metadata": a JSON object with the following fields:
          - title
          - objective
          - main_solution
          - supporting_solutions
          - mentioned_solutions
          - document_type
          - audience
          - source_date
          - language

        IMPORTANT:
        - For 'main_solution', always use the official SAP canonical solution name as published by SAP.
        - For 'supporting_solutions', only consider SAP Solutions and always use the official SAP canonical solution name.
        - Do not use acronyms, abbreviations, or local variants.
        - If unsure, leave the field empty.
        - Return only the JSON object — no explanation.

        Global summary text:
        {{ summary_text }}

    slide:
      id: "slide_default_v2_megaparse"
      template: |
        Global deck summary:
        {{ deck_summary }}

        Section {{ slide_index }} content (extracted via MegaParse):
        {{ megaparse_content | default(text) }}

        Original text (legacy):
        {{ text }}

        Notes:
        {{ notes }}

        Analyze section {{ slide_index }} from '{{ source_name }}' (PowerPoint document).

        **CRITICAL DUAL-SOURCE ANALYSIS**: You have TWO complementary information sources:
        1. **MegaParse content**: Structured text preserving tables, lists, formatting, and textual hierarchy
        2. **Visual image**: The actual slide with diagrams, charts, visual layouts, colors, and spatial relationships

        **Your mission**: SYNTHESIZE both sources to extract ALL GENUINE DISTINCT CONCEPTS (if any). Each concept should combine:
        - Textual details from MegaParse (precise data, lists, technical specs)
        - Visual context from the image (diagrams, flows, spatial relationships, visual emphasis)

        **Multi-concept extraction**: Extract ONLY genuine, distinct concepts present in the content. This could be:
        - 0 concepts (if title/transition/agenda slide with no substantial content)
        - 1 concept (if slide focuses on one topic)
        - Multiple concepts (if slide genuinely covers several distinct topics)

        **Quality over quantity**: Better one accurate concept than multiple fabricated ones.

        **Return a JSON array** where EACH ITEM represents ONE DISTINCT CONCEPT/TOPIC found in this section:

        ```json
        [
          {
            "full_explanation": "Complete explanation synthesizing MegaParse text + visual analysis. Describe what you see AND what you read, showing how they complement each other.",
            "meta": {
              "scope": "solution-specific" | "general" | "industry-specific",
              "type": "capability" | "architecture" | "process" | "feature" | "benefit" | "use-case" | "integration",
              "level": "strategic" | "tactical" | "operational",
              "tags": ["tag1", "tag2"],
              "slide_role": "title" | "content" | "summary" | "transition" | "agenda",
              "concept_confidence": 0.1-1.0,
              "has_visuals": true | false,
              "visual_type": "table" | "diagram" | "chart" | "screenshot" | "flow" | null
            }
          }
        ]
        ```

        **Concept Separation Guidelines (Text + Visual synthesis)**:
        - Each distinct business capability (text) + its visual representation (diagram/icon) = separate chunk
        - Each architectural component (MegaParse structure) + its position/connections in diagram = separate chunk
        - Each process step (textual detail) + its visual flow/arrow/sequence = separate chunk
        - Each table row (MegaParse data) + its visual formatting/emphasis = potential separate chunk
        - Each diagram component (visual) + its textual description (MegaParse) = separate chunk
        - Visual clusters/sections + their corresponding text blocks = separate chunks

        **Quality Requirements**:
        - Minimum 50 words per concept explanation (or return empty array [] if no substantial content)
        - Maximum 500 words per concept explanation
        - Focus on actionable, searchable knowledge
        - Preserve technical details and visual descriptions
        - Use professional, clear language
        - **NEVER make up information or force concepts where none exist**

        **For slides with minimal content**: If slide contains only titles, transitions, or agenda items without substantive information, return an empty array: []

        Return **only the JSON array**, no extra text.

  technical:
    deck:
      id: "deck_technical_v1"
      template: |
        You are given raw text extracted from a technical/architecture PowerPoint deck about a software solution.

        Return ONE JSON object with exactly these keys:
        {
          "summary": "<3–6 sentences describing scope, main technical themes, intended audience, and what a reader will learn>",
          "metadata": {
            "title": null | "<string>",
            "objective": null | "<string>",
            "main_solution": null | "<official product name>",                 // SAP: use canonical SAP name only
            "supporting_solutions": ["<SAP canonical name>", ...],             // [] if none
            "mentioned_solutions": ["<brand or product name>", ...],           // SAP & non-SAP; [] if none
            "document_type": "technical",
            "audience": null | "<string>",                                     // e.g., "IT architects","DevOps"
            "source_date": null | "<string as shown>",                         // keep original format (e.g., "H1 2025")
            "language": null | "fr" | "en",

            // OPTIONAL fields — fill ONLY if explicitly present in THIS deck:
            "product_version": null | "<string>",                               // e.g., "2023 FPxx"
            "document_subtype": null | "reference_architecture" | "deployment_guide" | "design_doc" | "operations_runbook" | "integration_guide" | "overview",
            "architecture_focus": ["<short bullet>", ...],                      // 0–10 items; concise phrases
            "architecture_domains": ["compute" | "network" | "storage" | "data" | "integration" | "security" | "identity" | "observability" | "operations" | "performance" | "availability" | "scalability", ...],
            "key_patterns": ["client-server" | "event-driven" | "pub/sub" | "batch ETL" | "microservices" | "layered" | "cache-aside" | "<as written>", ...],
            "tech_stack": ["<runtime/db/middleware/tool name>", ...],
            "assumptions": ["<explicit assumption>", ...],
            "constraints": ["<explicit constraint/limit>", ...],
            "dependencies": ["<external system/service>", ...],
            "non_goals": ["<explicit scope exclusion>", ...],
            "quality_attributes": ["performance" | "reliability" | "maintainability" | "security" | "scalability" | "availability" | "<as written>", ...],
            "standards_frameworks": ["<standard/framework explicitly named>", ...]   // e.g., "ISO 27001","SOC 2","NIST CSF"; [] if none
          }
        }

        Extraction rules:
        - **Explicit-only**: extract only what appears in THIS deck’s text; if absent → use null (scalars) or [] (lists).
        - **Naming**: SAP → canonical SAP names; non-SAP → official brand/product names.
        - **Limits**: keep lists concise (≤ 12 items), deduplicate exact duplicates, no invented content.
        - **Output**: return ONLY the JSON object; no comments, no trailing text.

        Raw deck text:
        {{ summary_text }}

    slide:
      id: "slide_technical_v2_megaparse"
      template: |
        Global deck summary:
        {{ deck_summary }}

        Section {{ slide_index }} content (extracted via MegaParse):
        {{ megaparse_content | default(text) }}

        Original text (legacy):
        {{ text }}

        Notes:
        {{ notes }}

        Analyze technical section {{ slide_index }} from '{{ source_name }}' (PowerPoint document).

        **CRITICAL DUAL-SOURCE TECHNICAL ANALYSIS**: You have TWO complementary technical information sources:
        1. **MegaParse content**: Structured technical text with preserved tables, code blocks, configurations, and hierarchical data
        2. **Visual image**: Technical diagrams, architecture schemas, network topologies, component relationships, and visual technical flows

        **Your mission**: SYNTHESIZE both sources to extract ALL GENUINE DISTINCT TECHNICAL CONCEPTS (if any). Combine:
        - Technical specifications from MegaParse (configs, APIs, data structures)
        - Visual architecture from the image (component connections, data flows, deployment patterns)

        **Return a JSON array** where each item represents ONE TECHNICAL CONCEPT:

        ```json
        [
          {
            "full_explanation": "Detailed technical explanation synthesizing MegaParse technical data + visual architecture analysis. Combine textual specs with visual component relationships.",
            "meta": {
              "slide_role": "title" | "agenda" | "content" | "summary" | "transition",
              "visual_type": "component_diagram" | "deployment_diagram" | "sequence_diagram" | "flowchart" | "data_model" | "network_topology" | "table" | "chart" | "screenshot" | null,
              "insight_level": "descriptive" | "analytical" | "strategic",
              "topic": "<2–6 words describing this specific concept>",
              "concept_scope": "component" | "integration" | "process" | "architecture" | "data_flow" | "configuration" | "deployment",
              "technical_complexity": "low" | "medium" | "high",
              "mentioned_solutions": ["<brand/product explicitly mentioned>"],
              "contains_visuals": true | false,
              "language": "fr" | "en",
              "section": "<string if applicable>",

              // TECHNICAL DETAILS (only if explicitly present)
              "components": ["<specific component/service/hardware>"],
              "interfaces": ["<API/protocol/standard>"],
              "data_entities": ["<table/object/stream>"],
              "data_flows": ["<source> → <target>: <description>"],
              "environments": ["<environment name>"],
              "constraints": ["<specific technical constraint>"],
              "assumptions": ["<technical assumption>"],
              "dependencies": ["<external system/service>"],
              "patterns": ["<architectural pattern>"],
              "quality_attributes": ["<quality attribute>"],
              "risks_or_notes": ["<technical risk/note>"],

              // SPECIALIZED MENTIONS
              "security_mentions": ["<security control/standard>"],
              "identity_mentions": ["<IdP/IAM/auth method>"],
              "operations_mentions": ["<ops/monitoring topic>"],
              "performance_mentions": ["<performance metric/mechanism>"],
              "availability_mentions": ["<HA/DR term or target>"]
            }
          }
        ]
        ```

        **Technical Concept Extraction Strategy (Text + Visual synthesis)**:
        - Each architectural component (visual box/service) + its technical specs (MegaParse data) = separate chunk
        - Each integration point (visual connection) + its protocol/config details (text) = separate chunk
        - Each data flow (visual arrow/path) + its transformation logic (textual description) = separate chunk
        - Each deployment scenario (visual topology) + its configuration parameters (structured text) = separate chunk
        - Technical table rows (MegaParse) + their visual context/grouping = separate chunks
        - Diagram components (visual elements) + their technical documentation (text) = separate chunks

        **Quality Standards**:
        - 75-600 words per technical concept (or return empty array [] if no substantial technical content)
        - Preserve exact technical terminology
        - Include quantitative metrics when present
        - Describe visual elements technically
        - Focus on implementable knowledge
        - **NEVER make up technical details or force concepts where none exist**

        **For slides with minimal technical content**: If slide contains only titles, transitions, or agenda items without substantive technical information, return an empty array: []

        Return **only the JSON array**.
  functional:
    deck:
      id: "deck_functional_v1"
      template: |
        You are given raw text extracted from a PowerPoint deck about an SAP solution.

        Return a single JSON object with two fields:
        - "summary": 3–6 sentences describing the deck’s purpose, target audience, and what a reader will learn.
        - "metadata": object with:
          - title
          - objective
          - main_solution              // SAP canonical name
          - supporting_solutions       // SAP canonical names (array)
          - mentioned_solutions        // both SAP & non-SAP (array)
          - document_type              // e.g., "Business Scope", "Overview", "Release Highlights"
          - audience                   // e.g., Line-of-Business leaders, IT architects, buyers
          - source_date                // if present (string)
          - language                   // "en" | "fr"
          - product_version            // e.g., "SAP S/4HANA 2023 FPS03" if visible
          - lob_coverage               // e.g., ["Finance","Supply Chain","Sales",...]
          - industry_coverage          // e.g., ["Automotive","Utilities",...]
          - capabilities_summary       // short bullets of key business capabilities
          - innovations_summary        // bullets for “What’s new/Delta highlights”
          - fiori_apps_present         // true|false if there is a page listing apps

        IMPORTANT:
        - Use official SAP canonical names. No acronyms.
        - If a value is not clearly present, set it to null or [].
        - Return only the JSON object, no extra text.

        Raw deck text:
        {{ summary_text }}

    slide:
      id: "slide_functional_v2_megaparse"
      template: |
        Global deck summary:
        {{ deck_summary }}

        Section {{ slide_index }} content (extracted via MegaParse):
        {{ megaparse_content | default(text) }}

        Original text (legacy):
        {{ text }}

        Notes:
        {{ notes }}

        Analyze functional section {{ slide_index }} from '{{ source_name }}' (PowerPoint document).

        **CRITICAL DUAL-SOURCE BUSINESS ANALYSIS**: You have TWO complementary business information sources:
        1. **MegaParse content**: Structured business text with preserved capability matrices, process lists, feature tables, and hierarchical business data
        2. **Visual image**: Business process flows, capability maps, organizational charts, user journey diagrams, and visual business relationships

        **Your mission**: SYNTHESIZE both sources to extract ALL GENUINE DISTINCT BUSINESS CONCEPTS (if any). Combine:
        - Business specifications from MegaParse (capabilities, features, processes, KPIs)
        - Visual business context from the image (process flows, user interactions, business relationships)

        **Return a JSON array** where each item represents ONE BUSINESS/FUNCTIONAL CONCEPT:

        ```json
        [
          {
            "full_explanation": "Complete business explanation synthesizing MegaParse business data + visual process/capability analysis. Combine textual capabilities with visual business flows.",
            "meta": {
              "slide_title": "<title if identifiable>",
              "slide_type": "title" | "agenda" | "content" | "summary" | "transition" | "capability_matrix" | "process_flow" | "fiori_apps_list" | "industry_scope" | "release_strategy" | "roadmap" | "value_story",
              "insight_level": "descriptive" | "analytical" | "strategic",
              "topic": "<main functional topic>",
              "concept_type": "capability" | "process" | "feature" | "benefit" | "use_case" | "integration" | "app" | "kpi",
              "business_complexity": "low" | "medium" | "high",
              "mentioned_solutions": ["<SAP canonical + non-SAP names>"],
              "contains_visuals": true | false,
              "language": "fr" | "en",
              "section": "<named section if exists>",

              // BUSINESS/FUNCTIONAL DETAILS (only if explicitly present)
              "lob": ["<line of business>"],
              "business_capabilities": ["<specific capability>"],
              "industry_tags": ["<industry>"],
              "delta_status": {"release": "<version>", "label": "new|update|unchanged"},
              "license_flags": {"additional_license": true | false, "additional_installation": true | false},
              "integrations": [{"product": "<name>", "type": "integration|connector|api"}],
              "fiori_apps": ["<app name/code>"],
              "key_kpis": ["<KPI or business outcome>"],
              "visuals_type": "matrix" | "portfolio_map" | "flow" | "table" | "screenshot" | "chart",
              "visuals_key_elements": ["<element>"],

              // VALUE & BUSINESS IMPACT
              "business_value": ["<value proposition>"],
              "target_personas": ["<user role/persona>"],
              "process_steps": ["<process step>"],
              "prerequisites": ["<business prerequisite>"],
              "success_metrics": ["<measurable outcome>"]
            }
          }
        ]
        ```

        **Business Concept Extraction Strategy (Text + Visual synthesis)**:
        - Each business capability (textual description) + its visual representation (process box/icon) = separate chunk
        - Each Fiori app (MegaParse details) + its visual context (screenshot/flow position) = separate chunk
        - Each process step (textual description) + its visual flow position (arrows/sequence) = separate chunk
        - Each industry use case (text) + its visual business scenario (diagram/illustration) = separate chunk
        - Capability matrix rows (MegaParse) + their visual grouping/color coding = separate chunks
        - Business integration points (text) + their visual business flow connections = separate chunks

        **Business Focus Requirements**:
        - 50-500 words per business concept (or return empty array [] if no substantial business content)
        - Emphasize business value and outcomes
        - Preserve capability hierarchies and relationships
        - Include user personas and roles when mentioned
        - Focus on actionable business knowledge
        - Extract structured lists (apps, capabilities, KPIs) accurately
        - **NEVER make up business capabilities or force concepts where none exist**

        **For slides with minimal business content**: If slide contains only titles, transitions, or agenda items without substantive business information, return an empty array: []

        Return **only the JSON array**.
