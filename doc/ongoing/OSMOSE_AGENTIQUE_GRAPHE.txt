# Section √† ins√©rer dans le graphe ASCII principal
# Ins√©rer juste avant "OSMOSE CORE PIPELINE - 4 √âTAPES S√âQUENTIELLES"

        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë ü§ñ ARCHITECTURE AGENTIQUE - ORCHESTRATION FSM (Phase 1.5)      ‚ïë
        ‚ïë    6 Agents Sp√©cialis√©s + Supervisor FSM Master                ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                                     ‚îÇ
                                     ‚ñº
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ  üéØ SUPERVISOR AGENT (FSM Master)       ‚îÇ
              ‚îÇ  File: agents/supervisor/supervisor.py  ‚îÇ
              ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
              ‚îÇ FSM States (10 √©tats):                  ‚îÇ
              ‚îÇ  INIT ‚Üí BUDGET_CHECK ‚Üí SEGMENT ‚Üí        ‚îÇ
              ‚îÇ  EXTRACT ‚Üí MINE_PATTERNS ‚Üí GATE_CHECK ‚Üí ‚îÇ
              ‚îÇ  PROMOTE ‚Üí FINALIZE ‚Üí DONE/ERROR        ‚îÇ
              ‚îÇ                                          ‚îÇ
              ‚îÇ ‚Ä¢ Timeout: 5 min/doc                    ‚îÇ
              ‚îÇ ‚Ä¢ Max steps: 50                          ‚îÇ
              ‚îÇ ‚Ä¢ Retry logic automatique                ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                     ‚îÇ
      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
      ‚îÇ              ‚îÇ              ‚îÇ              ‚îÇ              ‚îÇ
      ‚ñº              ‚ñº              ‚ñº              ‚ñº              ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üí∞ BUDGET‚îÇ  ‚îÇ üîç EXTRA ‚îÇ  ‚îÇ ‚õèÔ∏è PATTERN‚îÇ  ‚îÇ üö™ GATE  ‚îÇ  ‚îÇ üì° LLM   ‚îÇ
‚îÇ  MANAGER ‚îÇ  ‚îÇ  CTOR    ‚îÇ  ‚îÇ  MINER   ‚îÇ  ‚îÇ  KEEPER  ‚îÇ  ‚îÇDISPATCHER‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Caps:    ‚îÇ  ‚îÇ Routing: ‚îÇ  ‚îÇ Cross-   ‚îÇ  ‚îÇ Quality: ‚îÇ  ‚îÇ Rate     ‚îÇ
‚îÇ ‚Ä¢ SMALL  ‚îÇ  ‚îÇ NO_LLM   ‚îÇ  ‚îÇ segment  ‚îÇ  ‚îÇ STRICT   ‚îÇ  ‚îÇ Limits:  ‚îÇ
‚îÇ   120/doc‚îÇ  ‚îÇ SMALL    ‚îÇ  ‚îÇ reasoning‚îÇ  ‚îÇ BALANCED ‚îÇ  ‚îÇ 500 RPM  ‚îÇ
‚îÇ ‚Ä¢ BIG    ‚îÇ  ‚îÇ BIG      ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇPERMISSIVE‚îÇ  ‚îÇ 100 RPM  ‚îÇ
‚îÇ   8/doc  ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ Pattern  ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ 50 RPM   ‚îÇ
‚îÇ ‚Ä¢ VISION ‚îÇ  ‚îÇPrepassAn ‚îÇ  ‚îÇ mining   ‚îÇ  ‚îÇ Promo    ‚îÇ  ‚îÇ          ‚îÇ
‚îÇ   2/doc  ‚îÇ  ‚îÇ alyzer   ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇProto‚ÜíPub ‚îÇ  ‚îÇPriority  ‚îÇ
‚îÇ          ‚îÇ  ‚îÇ (NER     ‚îÇ  ‚îÇEnrich    ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ queue    ‚îÇ
‚îÇ Quotas:  ‚îÇ  ‚îÇdensity)  ‚îÇ  ‚îÇ concepts ‚îÇ  ‚îÇReject:   ‚îÇ  ‚îÇ          ‚îÇ
‚îÇ 10k/jour ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇfragments ‚îÇ  ‚îÇConcur-   ‚îÇ
‚îÇ 500/jour ‚îÇ  ‚îÇFallback  ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇstopwords ‚îÇ  ‚îÇrency     ‚îÇ
‚îÇ 100/jour ‚îÇ  ‚îÇgraceful  ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇPII       ‚îÇ  ‚îÇcontrol   ‚îÇ
‚îÇ          ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ          ‚îÇ
‚îÇ Redis    ‚îÇ  ‚îÇBudget    ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇRetry     ‚îÇ  ‚îÇ          ‚îÇ
‚îÇ tracking ‚îÇ  ‚îÇaware     ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇreco if   ‚îÇ  ‚îÇ          ‚îÇ
‚îÇ          ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇ          ‚îÇ  ‚îÇquality‚Üì  ‚îÇ  ‚îÇ          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
      ‚îÇ              ‚îÇ              ‚îÇ              ‚îÇ              ‚îÇ
      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                     ‚îÇ
                   √âTAT PARTAG√â (AgentState)
                   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                   ‚îÇ ‚Ä¢ budget_remaining{}         ‚îÇ
                   ‚îÇ ‚Ä¢ segments[]                 ‚îÇ
                   ‚îÇ ‚Ä¢ candidates[]               ‚îÇ
                   ‚îÇ ‚Ä¢ promoted[]                 ‚îÇ
                   ‚îÇ ‚Ä¢ cost_incurred              ‚îÇ
                   ‚îÇ ‚Ä¢ llm_calls_count{}          ‚îÇ
                   ‚îÇ ‚Ä¢ current_step, steps_count  ‚îÇ
                   ‚îÇ ‚Ä¢ errors[]                   ‚îÇ
                   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                     ‚îÇ
                                     ‚ñº

        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë  üåä OSMOSE CORE PIPELINE - 4 √âTAPES S√âQUENTIELLES          ‚ïë
        ‚ïë     (Orchestr√© par Extractor Agent via FSM Supervisor)     ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù


# Description des Agents (nouvelle section √† ajouter apr√®s "Description des Briques Logiques")

---

## ü§ñ Description des Agents (Architecture Agentique Phase 1.5)

### Contexte

L'architecture agentique OSMOSE Phase 1.5 V1.1 ajoute une couche d'orchestration intelligente au-dessus du pipeline s√©mantique Phase 1. Cette architecture permet :

- **Ma√Ætrise des co√ªts LLM** : Routing NO_LLM/SMALL/BIG + caps durs
- **Scalabilit√© production** : Rate limits, quotas tenant/jour
- **Quality gates** : Validation avant promotion Proto‚ÜíPublished
- **Retry logic** : Si qualit√© insuffisante, retry avec BIG model
- **Budget awareness** : Fallback graceful si budget √©puis√©

### Architecture FSM (Finite State Machine)

Le **Supervisor Agent** orchestre tous les agents via une FSM √† 10 √©tats :

```
INIT ‚Üí BUDGET_CHECK ‚Üí SEGMENT ‚Üí EXTRACT ‚Üí MINE_PATTERNS ‚Üí GATE_CHECK ‚Üí PROMOTE ‚Üí FINALIZE ‚Üí DONE/ERROR
```

**Transitions conditionnelles :**
- `BUDGET_CHECK` fail ‚Üí `ERROR`
- `GATE_CHECK` fail + budget BIG > 0 ‚Üí `EXTRACT` (retry)
- Timeout (5 min) ‚Üí `ERROR`
- Max steps (50) ‚Üí `ERROR`

---

### Agent 1: üéØ Supervisor Agent (FSM Master)

**Fichier :** `src/knowbase/agents/supervisor/supervisor.py` (~230 lignes)

**R√¥le :** Orchestrateur principal de l'architecture agentique.

**Responsabilit√©s :**
- Ex√©cution de la FSM compl√®te pour chaque document
- Coordination des 5 agents sp√©cialistes
- Timeout enforcement (5 min/doc)
- Max steps protection (50 steps)
- Error handling et retry logic
- Validation √©tat √† chaque step

**√âtats FSM :**
1. **INIT** : Initialisation
2. **BUDGET_CHECK** : V√©rification budget disponible
3. **SEGMENT** : Appel TopicSegmenter (OSMOSE Phase 1)
4. **EXTRACT** : Appel Extractor Orchestrator
5. **MINE_PATTERNS** : Appel Pattern Miner
6. **GATE_CHECK** : Appel Gatekeeper
7. **PROMOTE** : Promotion Proto‚ÜíPublished (Neo4j)
8. **FINALIZE** : Finalisation m√©triques
9. **DONE** : Terminaison r√©ussie
10. **ERROR** : Terminaison erreur

**Tools :** Aucun (coordonne les autres agents)

**Entr√©es :**
- `AgentState` initial avec `document_id`, `tenant_id`

**Sorties :**
- `AgentState` final avec m√©triques compl√®tes

**M√©triques suivies :**
- `steps_count`, `cost_incurred`, `llm_calls_count{}`
- `budget_remaining{}`, `promoted[]`, `errors[]`

---

### Agent 2: üí∞ Budget Manager Agent

**Fichier :** `src/knowbase/agents/budget/budget.py` (~150 lignes)

**R√¥le :** Gestion caps et quotas LLM pour ma√Ætrise co√ªts.

**Responsabilit√©s :**
- Enforce caps durs par document :
  * **SMALL** : 120 calls/doc (gpt-4o-mini)
  * **BIG** : 8 calls/doc (gpt-4o, Claude Sonnet)
  * **VISION** : 2 calls/doc (gpt-4o vision)
- Enforce quotas tenant/jour :
  * **SMALL** : 10,000 calls/jour/tenant
  * **BIG** : 500 calls/jour/tenant
  * **VISION** : 100 calls/jour/tenant
- Tracking temps-r√©el via Redis
- Refund logic si retry √©choue

**Tools :**
1. `check_budget` : V√©rifie si budget disponible
2. `consume_budget` : Consomme N calls
3. `refund_budget` : Rembourse calls si retry failed

**Storage Redis :**
```
budget:tenant:{tenant_id}:SMALL:{date} ‚Üí count calls
budget:tenant:{tenant_id}:BIG:{date} ‚Üí count calls
budget:tenant:{tenant_id}:VISION:{date} ‚Üí count calls
```

**Entr√©es :**
- `AgentState` avec `budget_remaining{}`, `tenant_id`

**Sorties :**
- `AgentState` avec `budget_remaining{}` mis √† jour

**Exemple flow :**
```
1. check_budget(tenant="acme", tier="SMALL", calls=5)
   ‚Üí budget_ok=True, remaining=115

2. consume_budget(tenant="acme", tier="SMALL", calls=5, cost=0.001)
   ‚Üí consumed=True, new_remaining=115

3. (si √©chec apr√®s) refund_budget(tenant="acme", tier="SMALL", calls=5)
   ‚Üí refunded=True, new_remaining=120
```

---

### Agent 3: üîç Extractor Orchestrator Agent

**Fichier :** `src/knowbase/agents/extractor/orchestrator.py` (~200 lignes)

**R√¥le :** Routing intelligent pour extraction concepts (cost optimization).

**Responsabilit√©s :**
- Analyse densit√© entities via **PrepassAnalyzer** (NER spaCy rapide)
- Route vers NO_LLM / SMALL / BIG selon densit√©
- Budget awareness avec fallback graceful
- Extraction concepts via m√©thode appropri√©e

**R√®gles Routing :**
- **NO_LLM** : < 3 entities d√©tect√©es (NER + Clustering uniquement)
- **SMALL** : 3-8 entities (+ gpt-4o-mini si budget permet)
- **BIG** : > 8 entities (+ gpt-4o si budget permet)

**Fallback Chain :**
```
BIG (budget √©puis√©) ‚Üí SMALL ‚Üí NO_LLM
```

**Tools :**
1. `prepass_analyzer` : Analyse NER rapide pour densit√© entities
2. `extract_concepts` : Extraction selon route choisie

**Entr√©es :**
- `AgentState` avec `segments[]`, `budget_remaining{}`

**Sorties :**
- `AgentState` avec `candidates[]` rempli
- `llm_calls_count{}` et `cost_incurred` mis √† jour

**Exemple flow :**
```
Segment 1: "Introduction to SAP HANA Security..."
‚Üì
PrepassAnalyzer (NER spaCy):
- Entities detected: 2 (SAP HANA, Security)
- Density: low
- Recommended route: NO_LLM
‚Üì
extract_concepts(route="NO_LLM"):
- NER only: SAP HANA, Security
- Clustering: Authentication, Encryption
- Result: 4 concepts (no LLM call)

Segment 2: "User management involves roles, privileges, LDAP, Kerberos, SAML, OAuth..."
‚Üì
PrepassAnalyzer:
- Entities detected: 10
- Density: high
- Recommended route: BIG
‚Üì
check_budget(BIG): OK
‚Üì
extract_concepts(route="BIG"):
- NER: users, roles, LDAP, Kerberos, SAML, OAuth
- LLM (gpt-4o): Extract + enrich with context
- Result: 15 concepts (1 BIG call)
```

---

### Agent 4: ‚õèÔ∏è Pattern Miner Agent

**Fichier :** `src/knowbase/agents/miner/miner.py` (~180 lignes)

**R√¥le :** Cross-segment reasoning et pattern detection.

**Responsabilit√©s :**
- Analyse concepts sur TOUS les segments (vue globale)
- D√©tection patterns r√©currents (concepts mentionn√©s > N fois)
- Enrichissement concepts avec co-occurrences
- Scoring importance bas√© sur fr√©quence + distribution

**Tools :**
1. `mine_patterns` : D√©tecte patterns r√©currents
2. `enrich_candidates` : Enrichit avec co-occurrences

**Entr√©es :**
- `AgentState` avec `candidates[]` (tous les concepts extraits)

**Sorties :**
- `AgentState` avec `candidates[]` enrichis (patterns ajout√©s)

**Exemple patterns d√©tect√©s :**
```
Pattern 1: "authentication" mentionn√© dans 4/5 segments
‚Üí Importance score: 0.90
‚Üí Co-occurrences: LDAP (3x), OAuth (2x), SAML (2x)

Pattern 2: "ISO 27001" mentionn√© dans 3/5 segments
‚Üí Importance score: 0.75
‚Üí Co-occurrences: compliance (3x), audit (2x)
```

---

### Agent 5: üö™ Gatekeeper Delegate Agent

**Fichier :** `src/knowbase/agents/gatekeeper/gatekeeper.py` (~220 lignes)

**R√¥le :** Quality control et promotion Proto‚ÜíPublished.

**Responsabilit√©s :**
- Score chaque candidate selon **Gate Profile** (STRICT/BALANCED/PERMISSIVE)
- Promeut concepts ‚â• seuil vers `promoted[]`
- Rejette fragments, stopwords, PII
- Recommande retry avec BIG model si qualit√© insuffisante

**Gate Profiles :**

| Profile | Min Confidence | Required Fields | Description |
|---------|---------------|-----------------|-------------|
| **STRICT** | 0.85 | name, type, definition | Production quality |
| **BALANCED** | 0.70 | name, type | Standard (default) |
| **PERMISSIVE** | 0.60 | name | Exploration mode |

**R√®gles Rejet :**
- Nom < 3 chars (fragments)
- Nom > 100 chars (trop long)
- Stopwords (the, and, or, etc.)
- PII detected (emails, phone numbers)
- Confidence < threshold

**Tools :**
1. `gate_check` : √âvalue tous les candidates
2. `promote_concepts` : Promeut vers Neo4j Published

**Entr√©es :**
- `AgentState` avec `candidates[]`

**Sorties :**
- `AgentState` avec `promoted[]` rempli
- `retry_recommended=True` si qualit√© < 50% promoted

**Exemple flow :**
```
Input: 45 candidates

Gate Check (BALANCED profile):
- Passed: 18 concepts (confidence ‚â• 0.70)
- Rejected: 27 concepts
  - 10 fragments (< 3 chars)
  - 5 stopwords
  - 8 low confidence (< 0.70)
  - 2 PII (emails)
  - 2 duplicates

Output: promoted[] = 18 concepts

Quality: 18/45 = 40% ‚Üí retry_recommended=True
(threshold: 50%)

‚Üí Supervisor FSM: GATE_CHECK ‚Üí EXTRACT (retry avec BIG)
```

---

### Agent 6: üì° LLM Dispatcher Agent

**Fichier :** `src/knowbase/agents/dispatcher/dispatcher.py` (~180 lignes)

**R√¥le :** Rate limiting et concurrency control pour LLM calls.

**Responsabilit√©s :**
- Rate limits enforcement (500/100/50 RPM)
- Concurrency control (max parallel calls)
- Priority queue (VISION > BIG > SMALL)
- Retry avec exponential backoff si rate limited

**Rate Limits :**
- **SMALL (gpt-4o-mini)** : 500 RPM
- **BIG (gpt-4o, Claude Sonnet)** : 100 RPM
- **VISION (gpt-4o vision)** : 50 RPM

**Concurrency Limits :**
- Max 10 parallel calls SMALL
- Max 5 parallel calls BIG
- Max 2 parallel calls VISION

**Tools :**
1. `dispatch_call` : Dispatche un LLM call avec rate limit
2. `batch_dispatch` : Dispatche plusieurs calls avec priorit√©

**Priority Queue :**
```
HIGH (VISION) ‚Üí MEDIUM (BIG) ‚Üí LOW (SMALL)
```

**Entr√©es :**
- `AgentState` avec `llm_calls_count{}`

**Sorties :**
- `AgentState` avec `llm_calls_count{}` mis √† jour

**Exemple flow :**
```
Batch dispatch: 10 SMALL calls + 2 BIG calls

Priority sorting:
1. BIG call 1 (priority: MEDIUM)
2. BIG call 2 (priority: MEDIUM)
3-12. SMALL calls 1-10 (priority: LOW)

Dispatching avec rate limits:
- BIG call 1: dispatched (concurrency: 1/5)
- BIG call 2: dispatched (concurrency: 2/5)
- SMALL calls 1-10: dispatched batch (concurrency: 10/10, rate: 500 RPM)

All calls completed in ~3s (vs ~8s sans rate limiting)
```

---

### üîó Int√©gration Agents ‚Üî OSMOSE Pipeline Phase 1

L'architecture agentique **orchestre** les composants OSMOSE Phase 1 :

**TopicSegmenter** ‚Üí Appel√© par Supervisor dans √©tat `SEGMENT`
**ConceptExtractor** ‚Üí Appel√© par Extractor Orchestrator avec routing intelligent
**SemanticIndexer** ‚Üí Appel√© apr√®s Pattern Miner (enrichissement)
**ConceptLinker** ‚Üí Appel√© apr√®s Gatekeeper (promoted concepts uniquement)

**Avantages :**
- ‚úÖ R√©utilisation code Phase 1 (pas de r√©√©criture)
- ‚úÖ Ajout couche intelligence (routing, budget, quality)
- ‚úÖ Migration progressive (feature flags par composant)
- ‚úÖ Scalabilit√© production (rate limits, quotas)

---

## üìä M√©triques Agentiques

### Par Document

```
AgentState final:
- steps_count: 12 (sur max 50)
- cost_incurred: $0.45
- llm_calls_count:
  * SMALL: 8 calls
  * BIG: 2 calls
  * VISION: 0 calls
- budget_remaining:
  * SMALL: 112/120
  * BIG: 6/8
  * VISION: 2/2
- promoted: 18 concepts
- errors: []
```

### Par Tenant/Jour

```
Redis keys:
budget:tenant:acme:SMALL:2025-10-15 ‚Üí 2,450 calls (sur 10,000)
budget:tenant:acme:BIG:2025-10-15 ‚Üí 125 calls (sur 500)
budget:tenant:acme:VISION:2025-10-15 ‚Üí 18 calls (sur 100)
```

---