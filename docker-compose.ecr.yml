# Docker Compose pour déploiement AWS EC2 avec images ECR
# Usage: docker-compose -f docker-compose.ecr.yml up -d
# Prerequisite: AWS CLI configuré + images dans ECR + .env configuré
#
# IMPORTANT: Utilisez .env.ecr.example comme template pour votre .env

version: '3.8'

x-common-config: &common-config
  stop_grace_period: 10s
  restart: unless-stopped

services:
  # ===================================
  # KNOWLEDGE GRAPH - Neo4j (depuis ECR)
  # ===================================
  neo4j:
    <<: *common-config
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-neo4j:latest
    container_name: knowbase-neo4j
    ports:
      - "7474:7474"  # HTTP Browser UI
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      # Authentication
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j_password}
      # Memory configuration (optimisé pour EC2 t3.xlarge+)
      - NEO4J_server_memory_heap_initial__size=1g
      - NEO4J_server_memory_heap_max__size=4g
      - NEO4J_server_memory_pagecache_size=2g
      # Security
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    networks:
      - knowbase_net
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ===================================
  # VECTOR DATABASE - Qdrant (depuis ECR)
  # ===================================
  qdrant:
    <<: *common-config
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-qdrant:latest
    container_name: knowbase-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__CHECK_FS=false
      - QDRANT__STORAGE__STRICT=false
      - QDRANT__LOG_LEVEL=INFO
    networks:
      - knowbase_net
    # Health check desactive: image Qdrant de base ne contient pas wget/curl
    # Qdrant demarre rapidement (~5-10s), un delai fixe suffit
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 15s

  # ===================================
  # CACHE & QUEUE - Redis (depuis ECR)
  # ===================================
  redis:
    <<: *common-config
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-redis:latest
    container_name: knowbase-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    networks:
      - knowbase_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===================================
  # BACKEND API - FastAPI (depuis ECR)
  # ===================================
  app:
    <<: *common-config
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-app:latest
    container_name: knowbase-app
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /app:/app/src
      HF_HOME: /data/models
      KNOWBASE_DATA_DIR: /data
      REDIS_URL: redis://redis:6379/0
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - app_data:/data
      - app_models:/data/models
      - ./config:/config:ro  # Read-only config mount (chemin absolu requis par l'app)
    networks:
      - knowbase_net
    working_dir: /app
    # Production mode: 4 workers uvicorn
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # ===================================
  # INGESTION WORKER - RQ Worker (depuis ECR)
  # ===================================
  ingestion-worker:
    <<: *common-config
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-worker:latest
    container_name: knowbase-worker
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    stop_grace_period: 30s
    env_file:
      - .env
    environment:
      PYTHONPATH: /app:/app/src
      HF_HOME: /data/models
      KNOWBASE_DATA_DIR: /data
      REDIS_URL: redis://redis:6379/0
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      DEV_MODE: "false"  # Mode production
      WORKER_CONCURRENCY: "4"  # Nombre de workers concurrents
    volumes:
      - worker_data:/data
      - app_models:/data/models  # Partage des modèles avec app
      - ./config:/config:ro  # Read-only config mount (chemin absolu requis par l'app)
    networks:
      - knowbase_net
    working_dir: /app
    command: python -m knowbase.ingestion.queue
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 6G
        reservations:
          cpus: '2.0'
          memory: 4G

  # ===================================
  # LEGACY UI - Streamlit (depuis ECR)
  # ===================================
  ui:
    <<: *common-config
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-ui:latest
    container_name: knowbase-ui
    depends_on:
      app:
        condition: service_healthy
    env_file:
      - .env
    environment:
      BACKEND_URL: http://app:8000
      PYTHONPATH: /app/src
      KNOWBASE_DATA_DIR: /data
    ports:
      - "${APP_UI_PORT:-8501}:8501"
    volumes:
      - ui_data:/data
      - ./config:/app/config:ro
    networks:
      - knowbase_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================================
  # FRONTEND - Next.js (depuis ECR)
  # ===================================
  frontend:
    <<: *common-config
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-frontend:latest
    container_name: knowbase-frontend
    depends_on:
      app:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      # API URLs pour production EC2 (ajuster selon votre domaine/IP)
      - NEXT_PUBLIC_API_BASE_URL=${FRONTEND_API_BASE_URL:-http://localhost:8000}
      - NEXT_PUBLIC_API_INTERNAL_URL=http://app:8000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - knowbase_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ===================================
  # NGROK - Tunnel (optionnel, depuis ECR)
  # ===================================
  # Décommentez si vous voulez exposer votre EC2 via ngrok
  # ngrok:
  #   <<: *common-config
  #   image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-ngrok:latest
  #   container_name: knowbase-ngrok
  #   depends_on:
  #     - app
  #     - frontend
  #   volumes:
  #     - ./ngrok.yml:/etc/ngrok.yml:ro
  #     - ngrok_logs:/logs
  #   env_file:
  #     - .env
  #   command: start --config /etc/ngrok.yml --all
  #   networks:
  #     - knowbase_net

networks:
  knowbase_net:
    name: knowbase_network
    driver: bridge

volumes:
  neo4j_data:
    name: knowbase_neo4j_data
  neo4j_logs:
    name: knowbase_neo4j_logs
  qdrant_data:
    name: knowbase_qdrant_data
  redis_data:
    name: knowbase_redis_data
  app_data:
    name: knowbase_app_data
  app_models:
    name: knowbase_app_models
  worker_data:
    name: knowbase_worker_data
  ui_data:
    name: knowbase_ui_data
  # ngrok_logs:
  #   name: knowbase_ngrok_logs