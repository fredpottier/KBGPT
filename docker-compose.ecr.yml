# Docker Compose pour récupération des images depuis ECR
# Utilisé après le build distant sur CodeBuild

version: '3.8'

services:
  app:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-app:latest
    container_name: knowbase_app
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      - DEBUG_APP=${DEBUG_APP:-false}
    env_file:
      - .env
    volumes:
      - ./data:/data
      - ./config:/app/config
    depends_on:
      - qdrant
      - redis

  frontend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-frontend:latest
    container_name: knowbase_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:${APP_PORT:-8000}
    depends_on:
      - app

  worker:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/sap-kb-worker:latest
    container_name: knowbase_worker
    environment:
      - DEBUG_WORKER=${DEBUG_WORKER:-false}
    env_file:
      - .env
    volumes:
      - ./data:/data
      - ./config:/app/config
    depends_on:
      - qdrant
      - redis

  # Services auxiliaires (inchangés)
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: knowbase_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage

  redis:
    image: redis:7-alpine
    container_name: knowbase_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  streamlit:
    image: knowbase_streamlit
    build:
      context: .
      dockerfile: streamlit/Dockerfile
    container_name: knowbase_streamlit
    ports:
      - "${APP_UI_PORT:-8501}:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - app

volumes:
  qdrant_data:
  redis_data: