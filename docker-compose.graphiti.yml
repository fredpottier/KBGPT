version: '3.8'

networks:
  graphiti_net:
    driver: bridge

volumes:
  neo4j_data:
    driver: local
  postgres_graphiti_data:
    driver: local

services:
  # Neo4j pour Graphiti (requis)
  neo4j:
    image: neo4j:5.26.0
    container_name: graphiti-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP interface Neo4j
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data
      - neo4j_data:/var/lib/neo4j/import
    environment:
      - NEO4J_AUTH=neo4j/graphiti_neo4j_pass
      - NEO4J_PLUGINS=["graph-data-science","apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=2g
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p graphiti_neo4j_pass 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    networks:
      - graphiti_net

  # Postgres pour persistance additionnelle (optionnel selon déploiement)
  postgres-graphiti:
    image: pgvector/pgvector:pg16
    container_name: graphiti-postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - postgres_graphiti_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=graphiti_db
      - POSTGRES_USER=graphiti
      - POSTGRES_PASSWORD=graphiti_postgres_pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U graphiti -d graphiti_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - graphiti_net

  # Graphiti service principal
  graphiti:
    image: zepai/graphiti:latest
    container_name: graphiti-service
    restart: unless-stopped
    ports:
      - "8300:8000"  # Graphiti API sur port 8300 pour éviter conflit avec notre FastAPI
    depends_on:
      neo4j:
        condition: service_healthy
      postgres-graphiti:
        condition: service_healthy
    environment:
      # Configuration Neo4j (requis pour Graphiti)
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=graphiti_neo4j_pass

      # Configuration LLM (requis)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-key-here}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-your-anthropic-key-here}

      # Configuration Graphiti spécifique
      - GRAPHITI_DB_URL=postgresql://graphiti:graphiti_postgres_pass@postgres-graphiti:5432/graphiti_db
      - GRAPHITI_API_PORT=8000
      - GRAPHITI_LOG_LEVEL=INFO

      # Configuration multi-tenant
      - GRAPHITI_DEFAULT_GROUP_ID=enterprise

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/docs || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - graphiti_net

# Service de monitoring optionnel pour debug
  graphiti-admin:
    image: adminer:4.8.1
    container_name: graphiti-admin
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres-graphiti
    environment:
      - ADMINER_DEFAULT_SERVER=postgres-graphiti
    networks:
      - graphiti_net