#!/usr/bin/env python3
"""
Script de migration Qdrant vers Graphiti
Importe les donn√©es existantes vers le Knowledge Graph Enterprise
"""

import asyncio
import json
import logging
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

# Ajouter le chemin racine pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from knowbase.common.clients.qdrant_client import get_qdrant_client
from knowbase.api.services.knowledge_graph import KnowledgeGraphService
from knowbase.api.schemas.knowledge_graph import (
    EntityCreate, RelationCreate, EntityType, RelationType
)

# Configuration logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


class QdrantToGraphitiMigrator:
    """Migrateur de donn√©es Qdrant vers Graphiti"""

    def __init__(self):
        self.qdrant_client = get_qdrant_client()
        self.kg_service = KnowledgeGraphService()
        self.collection_names = ["knowbase", "rfp_qa"]  # Collections √† migrer

        # Compteurs de migration
        self.stats = {
            "documents_processed": 0,
            "entities_created": 0,
            "relations_created": 0,
            "errors": 0,
            "skipped": 0
        }

    async def migrate_all(self) -> Dict[str, Any]:
        """
        Lance la migration compl√®te de toutes les collections

        Returns:
            Rapport de migration avec statistiques
        """
        logger.info("üöÄ D√©marrage migration Qdrant -> Graphiti Enterprise")
        start_time = datetime.now()

        try:
            # Initialiser le service KG
            await self.kg_service._ensure_initialized()
            logger.info("‚úÖ Knowledge Graph Enterprise initialis√©")

            # Migrer chaque collection
            for collection_name in self.collection_names:
                logger.info(f"üìÇ Migration collection '{collection_name}'")
                await self._migrate_collection(collection_name)

            # Cr√©er des relations inter-documents si possible
            logger.info("üîó Cr√©ation relations inter-documents")
            await self._create_document_relations()

            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            # Rapport final
            report = {
                "status": "success",
                "duration_seconds": duration,
                "start_time": start_time.isoformat(),
                "end_time": end_time.isoformat(),
                "collections_migrated": self.collection_names,
                "statistics": self.stats,
                "summary": f"Migration termin√©e: {self.stats['entities_created']} entit√©s, "
                          f"{self.stats['relations_created']} relations cr√©√©es"
            }

            logger.info("‚úÖ Migration termin√©e avec succ√®s!")
            logger.info(f"üìä Statistiques: {json.dumps(self.stats, indent=2)}")

            return report

        except Exception as e:
            logger.error(f"‚ùå Erreur migration: {e}")
            return {
                "status": "error",
                "error": str(e),
                "statistics": self.stats
            }

    async def _migrate_collection(self, collection_name: str):
        """Migre une collection Qdrant sp√©cifique"""
        try:
            # R√©cup√©rer tous les documents de la collection
            documents = self._get_all_documents(collection_name)
            logger.info(f"üìÑ {len(documents)} documents trouv√©s dans '{collection_name}'")

            for doc_data in documents:
                try:
                    await self._process_document(doc_data, collection_name)
                    self.stats["documents_processed"] += 1

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur traitement document {doc_data.get('id', 'unknown')}: {e}")
                    self.stats["errors"] += 1
                    continue

        except Exception as e:
            logger.error(f"‚ùå Erreur migration collection {collection_name}: {e}")
            raise

    def _get_all_documents(self, collection_name: str) -> List[Dict[str, Any]]:
        """R√©cup√®re tous les documents d'une collection Qdrant"""
        try:
            # Faire une recherche large pour r√©cup√©rer tous les documents
            search_result = self.qdrant_client.scroll(
                collection_name=collection_name,
                limit=10000,  # Limite √©lev√©e pour r√©cup√©rer beaucoup de documents
                with_payload=True,
                with_vectors=False  # Pas besoin des vecteurs pour la migration
            )

            documents = []
            for point in search_result[0]:  # search_result est un tuple (points, next_page_offset)
                doc = {
                    "id": str(point.id),
                    "payload": point.payload
                }
                documents.append(doc)

            return documents

        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration documents {collection_name}: {e}")
            return []

    async def _process_document(self, doc_data: Dict[str, Any], collection_name: str):
        """Traite un document individuel pour extraction d'entit√©s"""
        payload = doc_data.get("payload", {})
        doc_id = doc_data.get("id")

        # Extraire les m√©tadonn√©es importantes (structure r√©elle Qdrant)
        # Payload keys: text, language, document, solution, chunk, deck_summary, prompt_meta
        document_ref = payload.get("document", f"Document_{doc_id}")
        content = payload.get("text", payload.get("content", ""))
        solution = payload.get("solution", "")
        chunk_raw = payload.get("chunk", 0)

        # Convertir en types appropri√©s (peuvent √™tre dict, str, int, etc.)
        document_ref = str(document_ref) if document_ref else f"Document_{doc_id}"
        solution = str(solution) if solution and solution != "" else ""

        # Chunk peut √™tre dict, int ou autre - le convertir en int si possible
        try:
            chunk_id = int(chunk_raw) if chunk_raw else 0
        except (TypeError, ValueError):
            chunk_id = 0  # Fallback si conversion impossible

        # Construire un titre lisible
        title = f"{solution} - {document_ref}" if solution else document_ref

        # D√©terminer le type d'entit√© bas√© sur la collection et les m√©tadonn√©es
        entity_type = self._determine_entity_type(collection_name, payload)

        # Cr√©er l'entit√© document
        try:
            entity = EntityCreate(
                name=f"{title} (chunk {chunk_id})" if chunk_id > 0 else title,
                entity_type=entity_type,
                description=self._generate_entity_description(payload, content),
                attributes={
                    "original_id": doc_id,
                    "collection": collection_name,
                    "document": document_ref,
                    "solution": solution,
                    "chunk_id": chunk_id,
                    "language": payload.get("language", ""),
                    "deck_summary": payload.get("deck_summary", ""),
                    "content_preview": content[:200] + "..." if len(content) > 200 else content,
                }
            )

            created_entity = await self.kg_service.create_entity(entity)
            self.stats["entities_created"] += 1
            logger.debug(f"‚úÖ Entit√© cr√©√©e: {created_entity.name}")

            # Extraire et cr√©er des entit√©s/relations additionnelles si pertinent
            await self._extract_additional_entities(created_entity, payload, content)

        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation entit√© pour document {doc_id}: {e}")
            raise

    def _determine_entity_type(self, collection_name: str, payload: Dict[str, Any]) -> EntityType:
        """D√©termine le type d'entit√© bas√© sur la collection et m√©tadonn√©es"""

        # Logique bas√©e sur la collection
        if collection_name == "rfp_qa":
            return EntityType.PROCESS  # Q/A RFP = processus m√©tier

        # Logique bas√©e sur le champ solution ou document (peuvent √™tre dict ou str)
        solution = payload.get("solution", "")
        document = payload.get("document", "")

        # Convertir en string si n√©cessaire
        solution_str = str(solution).lower() if solution else ""
        document_str = str(document).lower() if document else ""

        # Si une solution SAP est identifi√©e
        if solution_str and "sap" in solution_str:
            return EntityType.SOLUTION

        # Bas√© sur l'extension du document
        if any(ext in document_str for ext in [".pptx", ".ppt", ".pdf", ".docx", ".doc"]):
            return EntityType.DOCUMENT

        # Par d√©faut
        return EntityType.CONCEPT

    def _generate_entity_description(self, payload: Dict[str, Any], content: str) -> str:
        """G√©n√®re une description pour l'entit√©"""
        # Utiliser la structure r√©elle: document, solution, deck_summary
        document = payload.get("document", "")
        solution = payload.get("solution", "")
        deck_summary = payload.get("deck_summary", "")
        language = payload.get("language", "")

        # Convertir en strings si n√©cessaire
        document = str(document) if document else ""
        solution = str(solution) if solution else ""
        deck_summary = str(deck_summary) if deck_summary else ""
        language = str(language) if language else ""

        desc_parts = []

        if solution:
            desc_parts.append(f"Solution: {solution}")

        if document:
            try:
                desc_parts.append(f"Document: {Path(document).name}")
            except:
                desc_parts.append(f"Document: {document}")

        if deck_summary:
            desc_parts.append(f"R√©sum√©: {deck_summary[:100]}")
        elif content:
            # Aper√ßu du contenu si pas de r√©sum√©
            content_preview = content.strip()[:150]
            if content_preview:
                desc_parts.append(f"Contenu: {content_preview}...")

        if language:
            desc_parts.append(f"Langue: {language}")

        return " | ".join(desc_parts) or "Document migr√© depuis Qdrant"

    async def _extract_additional_entities(self,
                                         main_entity,
                                         payload: Dict[str, Any],
                                         content: str):
        """Extrait des entit√©s additionnelles du contenu si possible"""

        # Pour l'instant, logique simple d'extraction
        # Peut √™tre √©tendu avec NLP plus avanc√©

        try:
            # Rechercher des mentions de solutions SAP dans le contenu
            sap_solutions = self._extract_sap_solutions(content)

            for solution_name in sap_solutions[:3]:  # Limiter √† 3 pour √©viter le spam
                try:
                    # Cr√©er l'entit√© solution
                    solution_entity = EntityCreate(
                        name=solution_name,
                        entity_type=EntityType.SOLUTION,
                        description=f"Solution SAP mentionn√©e dans {main_entity.name}",
                        attributes={
                            "extracted_from": main_entity.uuid,
                            "extraction_method": "keyword_matching"
                        }
                    )

                    created_solution = await self.kg_service.create_entity(solution_entity)
                    self.stats["entities_created"] += 1

                    # Cr√©er une relation "references"
                    relation = RelationCreate(
                        source_entity_id=main_entity.uuid,
                        target_entity_id=created_solution.uuid,
                        relation_type=RelationType.REFERENCES,
                        description=f"Le document fait r√©f√©rence √† la solution {solution_name}",
                        confidence=0.7  # Confiance mod√©r√©e pour extraction automatique
                    )

                    await self.kg_service.create_relation(relation)
                    self.stats["relations_created"] += 1

                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è Erreur cr√©ation entit√© solution {solution_name}: {e}")
                    continue

        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Erreur extraction entit√©s additionnelles: {e}")
            # Non critique, continuer

    def _extract_sap_solutions(self, content: str) -> List[str]:
        """Extrait des noms de solutions SAP du contenu"""
        solutions = []
        content_lower = content.lower()

        # Liste de solutions SAP communes
        sap_solutions = [
            "SAP S/4HANA", "SAP ECC", "SAP HANA", "SAP BW", "SAP BI", "SAP CRM",
            "SAP SRM", "SAP SCM", "SAP PLM", "SAP GRC", "SAP HCM", "SAP SuccessFactors",
            "SAP Concur", "SAP Ariba", "SAP Fieldglass", "SAP Analytics Cloud",
            "SAP ABAP", "SAP Fiori", "SAP UI5", "SAP Cloud Platform"
        ]

        for solution in sap_solutions:
            if solution.lower() in content_lower:
                solutions.append(solution)

        return list(set(solutions))  # D√©dupliquer

    async def _create_document_relations(self):
        """Cr√©e des relations entre documents bas√©es sur leur similarit√©"""
        try:
            # Pour l'instant, une logique simple bas√©e sur les sources
            # Peut √™tre √©tendu avec de la similarit√© vectorielle plus tard

            # R√©cup√©rer toutes les relations existantes pour voir les documents
            relations = await self.kg_service.list_relations(limit=1000)

            # Grouper par source pour cr√©er des relations "part_of"
            source_groups: Dict[str, List[str]] = {}

            for relation in relations:
                # R√©cup√©rer l'entit√© source pour analyser ses attributs
                entity = await self.kg_service.get_entity(relation.source_entity_id)
                if entity and entity.attributes.get("source"):
                    source = Path(entity.attributes["source"]).stem  # Nom fichier sans extension
                    if source not in source_groups:
                        source_groups[source] = []
                    source_groups[source].append(entity.uuid)

            # Cr√©er des relations "part_of" entre documents du m√™me fichier
            for source, entity_ids in source_groups.items():
                if len(entity_ids) > 1:  # Au moins 2 entit√©s du m√™me fichier
                    # Cr√©er des relations entre les chunks
                    for i, source_id in enumerate(entity_ids):
                        for target_id in entity_ids[i+1:]:
                            try:
                                relation = RelationCreate(
                                    source_entity_id=source_id,
                                    target_entity_id=target_id,
                                    relation_type=RelationType.SIMILAR_TO,
                                    description=f"Documents provenant du m√™me fichier: {source}",
                                    confidence=0.8
                                )

                                await self.kg_service.create_relation(relation)
                                self.stats["relations_created"] += 1

                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è Erreur cr√©ation relation similarit√©: {e}")
                                continue

            logger.info(f"üîó Relations inter-documents cr√©√©es pour {len(source_groups)} fichiers")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur cr√©ation relations documents: {e}")
            # Non critique


async def main():
    """Point d'entr√©e principal du script"""
    try:
        migrator = QdrantToGraphitiMigrator()

        print("üöÄ Migration Qdrant vers Graphiti Enterprise")
        print("=" * 50)

        # Lancer la migration
        report = await migrator.migrate_all()

        # Afficher le rapport final
        print("\nüìä RAPPORT DE MIGRATION")
        print("=" * 50)
        print(f"Status: {report['status']}")

        if report["status"] == "success":
            print(f"Dur√©e: {report['duration_seconds']:.1f} secondes")
            print(f"Collections: {', '.join(report['collections_migrated'])}")
            print("\nüìà Statistiques:")
            for key, value in report["statistics"].items():
                print(f"  {key}: {value}")
            print(f"\n‚úÖ {report['summary']}")
        else:
            print(f"‚ùå Erreur: {report.get('error', 'Erreur inconnue')}")
            return 1

        return 0

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Migration interrompue par l'utilisateur")
        return 130

    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))