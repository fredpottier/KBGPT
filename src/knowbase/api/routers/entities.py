"""
Router API pour gestion des entit√©s Knowledge Graph.

Phase 1 - Gestion validation entit√©s dynamiques
Phase 3 - Admin actions (approve, merge, delete cascade)
"""
from typing import List, Optional
from pathlib import Path
import yaml

from fastapi import APIRouter, HTTPException, Query, Depends, Body
from pydantic import BaseModel, Field

from knowbase.api.schemas.knowledge_graph import EntityResponse
from knowbase.api.services.knowledge_graph_service import KnowledgeGraphService
from knowbase.api.auth_deps.auth import require_admin, get_tenant_id
from knowbase.common.logging import setup_logging
from knowbase.config.settings import get_settings

settings = get_settings()
logger = setup_logging(settings.logs_dir, "entities_router.log")

router = APIRouter(prefix="/entities", tags=["entities"])


class EntitiesListResponse(BaseModel):
    """R√©ponse liste entit√©s avec filtres."""

    entities: List[EntityResponse] = Field(
        ...,
        description="Liste entit√©s"
    )
    total: int = Field(
        ...,
        description="Nombre total entit√©s"
    )
    entity_type_filter: Optional[str] = Field(
        default=None,
        description="Filtre entity_type appliqu√© (si any)"
    )
    status_filter: Optional[str] = Field(
        default=None,
        description="Filtre status appliqu√© (si any)"
    )


class PendingEntitiesResponse(BaseModel):
    """R√©ponse liste entit√©s pending."""

    entities: List[EntityResponse] = Field(
        ...,
        description="Liste entit√©s en attente validation"
    )
    total: int = Field(
        ...,
        description="Nombre total entit√©s pending"
    )
    entity_type_filter: Optional[str] = Field(
        default=None,
        description="Filtre entity_type appliqu√© (si any)"
    )


@router.get(
    "",
    response_model=EntitiesListResponse,
    summary="Liste entit√©s avec filtres",
    description="""
    Liste les entit√©s du Knowledge Graph avec filtres optionnels.

    **Filtres disponibles**:
    - `entity_type` : Filtrer par type (SOLUTION, COMPONENT, etc.)
    - `status` : Filtrer par statut (pending, validated)
    - `tenant_id` : Isolation multi-tenant
    - `limit` / `offset` : Pagination

    **Use Case**: Page drill-down types dynamiques (/admin/dynamic-types/{typeName})
    """,
    responses={
        200: {
            "description": "Liste entit√©s avec filtres",
            "content": {
                "application/json": {
                    "example": {
                        "entities": [
                            {
                                "uuid": "123e4567-e89b-12d3-a456-426614174000",
                                "name": "SAP S/4HANA",
                                "entity_type": "SOLUTION",
                                "status": "pending",
                                "description": "ERP solution",
                                "confidence": 0.95
                            }
                        ],
                        "total": 22,
                        "entity_type_filter": "SOLUTION",
                        "status_filter": None
                    }
                }
            }
        }
    }
)
async def list_entities(
    entity_type: Optional[str] = Query(
        default=None,
        description="Filtrer par entity_type (ex: SOLUTION, COMPONENT)",
        example="SOLUTION"
    ),
    status: Optional[str] = Query(
        default=None,
        description="Filtrer par status (pending | validated)",
        example="pending"
    ),
    tenant_id: str = Query(
        default="default",
        description="Tenant ID",
        example="default"
    ),
    limit: int = Query(
        default=100,
        ge=1,
        le=1000,
        description="Limite r√©sultats (max 1000)",
        example=100
    ),
    offset: int = Query(
        default=0,
        ge=0,
        description="Offset pagination",
        example=0
    )
):
    """
    Liste entit√©s avec filtres entity_type et status.

    Args:
        entity_type: Type d'entit√© (optionnel)
        status: Statut entit√© (optionnel)
        tenant_id: Tenant ID
        limit: Limite r√©sultats
        offset: Offset pagination

    Returns:
        Liste entit√©s filtr√©es
    """
    logger.info(
        f"üìã GET /entities - entity_type={entity_type}, status={status}, "
        f"tenant={tenant_id}, limit={limit}, offset={offset}"
    )

    kg_service = KnowledgeGraphService(tenant_id=tenant_id)

    try:
        # Query Neo4j avec filtres
        query = """
        MATCH (e:Entity {tenant_id: $tenant_id})
        """

        params = {"tenant_id": tenant_id, "limit": limit, "offset": offset}

        # Ajouter filtres conditionnels
        if entity_type:
            query += " WHERE e.entity_type = $entity_type"
            params["entity_type"] = entity_type

        if status:
            if entity_type:
                query += " AND e.status = $status"
            else:
                query += " WHERE e.status = $status"
            params["status"] = status

        query += """
        RETURN e
        ORDER BY e.created_at DESC
        SKIP $offset
        LIMIT $limit
        """

        entities = []
        total = 0

        with kg_service.driver.session() as session:
            # Compter total (enlever ORDER BY, SKIP, LIMIT)
            count_query = query.replace("RETURN e\n        ORDER BY e.created_at DESC\n        SKIP $offset\n        LIMIT $limit", "RETURN count(e) AS total")
            count_result = session.run(count_query, params)
            count_record = count_result.single()
            total = count_record["total"] if count_record else 0

            # R√©cup√©rer entit√©s
            result = session.run(query, params)

            for record in result:
                node = record["e"]

                # Parse attributes si c'est une string JSON
                attributes = node.get("attributes", {})
                if isinstance(attributes, str):
                    import json
                    try:
                        attributes = json.loads(attributes) if attributes else {}
                    except:
                        attributes = {}

                entities.append(EntityResponse(
                    uuid=node["uuid"],
                    name=node["name"],
                    entity_type=node["entity_type"],
                    canonical_name=node.get("canonical_name"),  # Nom canonique apr√®s normalisation
                    description=node.get("description"),
                    confidence=node.get("confidence", 0.0),
                    attributes=attributes,
                    source_slide_number=node.get("source_slide_number"),
                    source_document=node.get("source_document"),
                    source_chunk_id=node.get("source_chunk_id"),
                    tenant_id=node["tenant_id"],
                    status=node.get("status", "pending"),
                    is_cataloged=node.get("is_cataloged", False),
                    created_at=node["created_at"].to_native(),
                    updated_at=node.get("updated_at").to_native() if node.get("updated_at") else None
                ))

        logger.info(
            f"‚úÖ Trouv√© {len(entities)} entit√©s (total={total}, "
            f"type={entity_type or 'all'}, status={status or 'all'})"
        )

        kg_service.close()

        return EntitiesListResponse(
            entities=entities,
            total=total,
            entity_type_filter=entity_type,
            status_filter=status
        )

    except Exception as e:
        logger.error(f"‚ùå Erreur list entities: {e}", exc_info=True)
        kg_service.close()
        raise HTTPException(
            status_code=500,
            detail=f"Failed to list entities: {str(e)}"
        )


@router.get(
    "/pending",
    response_model=PendingEntitiesResponse,
    summary="Liste entit√©s non catalogu√©es (pending)",
    description="""
    Retourne toutes les entit√©s avec status='pending' (non catalogu√©es dans ontologie YAML).

    **Workflow Auto-Classification**:
    - Import document ‚Üí LLM extrait entit√©s ‚Üí EntityNormalizer check ontologie
    - Si entit√© trouv√©e dans YAML ‚Üí status='validated', is_cataloged=true
    - Si entit√© NON trouv√©e ‚Üí status='pending', is_cataloged=false
    - Admin review via cette API ‚Üí Approve/Merge/Delete

    **Use Cases**:
    - UI Admin: Page /admin/entities-pending affiche cette liste
    - Curation: Identifier nouvelles entit√©s m√©tier d√©couvertes
    - Quality: D√©tecter entit√©s mal extraites (typos, doublons)

    **Filtrage**:
    - `entity_type` : Focus sur un type sp√©cifique (ex: SOLUTION, COMPONENT)
    - `tenant_id` : Isolation multi-tenant stricte
    - Pagination : limit/offset

    **Performance**: < 100ms (index Neo4j sur tenant_id + status)
    """,
    responses={
        200: {
            "description": "Liste entit√©s pending",
            "content": {
                "application/json": {
                    "example": {
                        "entities": [
                            {
                                "uuid": "ent-123",
                                "name": "SAP Analytics Cloud Advanced",
                                "entity_type": "SOLUTION",
                                "description": "Advanced analytics platform",
                                "status": "pending",
                                "is_cataloged": False,
                                "confidence": 0.87,
                                "source_document": "SAP_Portfolio_2025.pptx",
                                "created_at": "2025-10-06T10:15:00Z"
                            }
                        ],
                        "total": 1,
                        "entity_type_filter": None,
                        "tenant_id": "default"
                    }
                }
            }
        },
        422: {
            "description": "Param√®tres invalides (limit/offset n√©gatifs)",
            "content": {
                "application/json": {
                    "example": {
                        "detail": [
                            {
                                "loc": ["query", "limit"],
                                "msg": "ensure this value is greater than or equal to 1",
                                "type": "value_error.number.not_ge"
                            }
                        ]
                    }
                }
            }
        }
    }
)
async def list_pending_entities(
    entity_type: Optional[str] = Query(
        default=None,
        description="Filtrer par type d'entit√© (ex: INFRASTRUCTURE)",
        example="SOLUTION"
    ),
    tenant_id: str = Query(
        default="default",
        description="Tenant ID (multi-tenancy)",
        example="default"
    ),
    limit: int = Query(
        default=100,
        ge=1,
        le=1000,
        description="Nombre max entit√©s retourn√©es",
        example=100
    ),
    offset: int = Query(
        default=0,
        ge=0,
        description="Offset pagination",
        example=0
    )
):
    """
    Liste toutes les entit√©s avec status=pending (non catalogu√©es).

    Retourne uniquement les entit√©s qui n'ont PAS √©t√© trouv√©es dans les catalogues
    d'ontologie YAML. Ces entit√©s n√©cessitent validation manuelle admin.

    Args:
        entity_type: Filtrer par type (optionnel)
        tenant_id: ID tenant
        limit: Limite r√©sultats (d√©faut 100, max 1000)
        offset: Offset pagination (d√©faut 0)

    Returns:
        Liste entit√©s pending avec total count
    """
    logger.info(
        f"üìã GET /entities/pending - entity_type={entity_type}, tenant={tenant_id}, "
        f"limit={limit}, offset={offset}"
    )

    kg_service = KnowledgeGraphService(tenant_id=tenant_id)

    try:
        # Construire requ√™te Cypher avec filtres
        query = """
        MATCH (e:Entity)
        WHERE e.tenant_id = $tenant_id
          AND e.status = 'pending'
        """

        params = {
            "tenant_id": tenant_id,
            "limit": limit,
            "offset": offset
        }

        # Filtre optionnel entity_type
        if entity_type:
            query += " AND e.entity_type = $entity_type"
            params["entity_type"] = entity_type.upper()

        # Order by created_at desc (plus r√©cents en premier)
        query += """
        RETURN e
        ORDER BY e.created_at DESC
        SKIP $offset
        LIMIT $limit
        """

        with kg_service.driver.session() as session:
            result = session.run(query, **params)
            records = result.data()

        # Convertir Neo4j records ‚Üí EntityResponse
        import json
        entities = []
        for record in records:
            node = record["e"]
            attributes_dict = json.loads(node.get("attributes", "{}"))

            entity = EntityResponse(
                uuid=node["uuid"],
                name=node["name"],
                entity_type=node["entity_type"],
                description=node["description"],
                confidence=node["confidence"],
                attributes=attributes_dict,
                source_slide_number=node.get("source_slide_number"),
                source_document=node.get("source_document"),
                source_chunk_id=node.get("source_chunk_id"),
                tenant_id=node["tenant_id"],
                status=node["status"],
                is_cataloged=node.get("is_cataloged", False),
                created_at=node["created_at"].to_native(),
                updated_at=node.get("updated_at").to_native() if node.get("updated_at") else None
            )
            entities.append(entity)

        # Count total (sans limit/offset)
        count_query = """
        MATCH (e:Entity)
        WHERE e.tenant_id = $tenant_id
          AND e.status = 'pending'
        """
        count_params = {"tenant_id": tenant_id}

        if entity_type:
            count_query += " AND e.entity_type = $entity_type"
            count_params["entity_type"] = entity_type.upper()

        count_query += " RETURN count(e) as total"

        with kg_service.driver.session() as session:
            count_result = session.run(count_query, **count_params)
            total = count_result.single()["total"]

        logger.info(
            f"‚úÖ Trouv√© {len(entities)} entit√©s pending (total={total}, "
            f"entity_type={entity_type or 'all'})"
        )

        return PendingEntitiesResponse(
            entities=entities,
            total=total,
            entity_type_filter=entity_type
        )

    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration entit√©s pending: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to fetch pending entities: {str(e)}"
        )
    finally:
        kg_service.close()


@router.get("/types/discovered", response_model=List[dict])
async def list_discovered_entity_types(
    tenant_id: str = Query(
        default="default",
        description="Tenant ID"
    )
):
    """
    Liste tous les entity_types d√©couverts dans le syst√®me.

    Retourne la liste des types avec comptage entit√©s (pending vs validated).

    Returns:
        Liste dicts: [{type_name, total_entities, pending_count, validated_count}]
    """
    logger.info(f"üìã GET /entities/types/discovered - tenant={tenant_id}")

    kg_service = KnowledgeGraphService(tenant_id=tenant_id)

    try:
        query = """
        MATCH (e:Entity {tenant_id: $tenant_id})
        WITH e.entity_type AS type_name,
             count(e) AS total_entities,
             sum(CASE WHEN e.status = 'pending' THEN 1 ELSE 0 END) AS pending_count,
             sum(CASE WHEN e.status = 'validated' THEN 1 ELSE 0 END) AS validated_count
        RETURN type_name, total_entities, pending_count, validated_count
        ORDER BY total_entities DESC
        """

        with kg_service.driver.session() as session:
            result = session.run(query, tenant_id=tenant_id)
            records = result.data()

        logger.info(f"‚úÖ Trouv√© {len(records)} types d'entit√©s d√©couverts")

        return records

    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration types d√©couverts: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to fetch discovered types: {str(e)}"
        )
    finally:
        kg_service.close()


# === PHASE 3: ADMIN ACTIONS ===


class ApproveEntityRequest(BaseModel):
    """Requ√™te approbation entit√©."""

    add_to_ontology: bool = Field(
        default=False,
        description="Ajouter automatiquement √† l'ontologie YAML correspondante"
    )
    ontology_description: Optional[str] = Field(
        default=None,
        description="Description pour ontologie (si add_to_ontology=True)"
    )


class MergeEntitiesRequest(BaseModel):
    """Requ√™te fusion entit√©s."""

    target_uuid: str = Field(
        ...,
        description="UUID entit√© cible (celle qui sera conserv√©e)"
    )
    canonical_name: Optional[str] = Field(
        default=None,
        description="Nom canonique final (optionnel, sinon garde nom cible)"
    )


@router.post(
    "/{uuid}/approve",
    response_model=EntityResponse,
    summary="Approuver entit√© pending",
    description="""
    Approuve une entit√© pending (transition pending ‚Üí validated) + optionnel enrichissement ontologie YAML.

    **Workflow Complet**:
    1. V√©rification existence entit√© (status='pending')
    2. UPDATE Neo4j : status='validated', validated_by, validated_at
    3. **Optionnel** (si add_to_ontology=true):
       - D√©termine fichier YAML selon entity_type (ex: SOLUTION ‚Üí solutions.yaml)
       - Ajoute entit√© avec name, aliases, description
       - **Impact futur** : Entit√©s similaires ‚Üí Automatiquement is_cataloged=true

    **Use Cases**:
    - Nouvelle entit√© m√©tier d√©couverte ‚Üí Approuver pour futures utilisations
    - Enrichir ontologie automatiquement sans √©dition manuelle YAML
    - Tra√ßabilit√© : Qui a valid√© quoi et quand

    **Security**:
    - Requiert header `X-Admin-Key` (auth simplifi√©e dev, JWT pr√©vu prod)
    - Requiert header `X-Tenant-ID` (isolation multi-tenant)

    **Performance**: < 50ms (Neo4j update + optionnel YAML write)
    """,
    responses={
        200: {
            "description": "Entit√© approuv√©e avec succ√®s",
            "content": {
                "application/json": {
                    "example": {
                        "uuid": "ent-456",
                        "name": "SAP Analytics Cloud Advanced",
                        "entity_type": "SOLUTION",
                        "status": "validated",
                        "is_cataloged": True,
                        "validated_by": "admin@example.com",
                        "validated_at": "2025-10-06T16:00:00Z",
                        "tenant_id": "default"
                    }
                }
            }
        },
        400: {
            "description": "Entit√© d√©j√† validated",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Entity already validated (current status: validated)"
                    }
                }
            }
        },
        401: {
            "description": "X-Admin-Key manquant",
            "content": {
                "application/json": {
                    "example": {"detail": "X-Admin-Key header required"}
                }
            }
        },
        403: {
            "description": "X-Admin-Key invalide",
            "content": {
                "application/json": {
                    "example": {"detail": "Admin access required"}
                }
            }
        },
        404: {
            "description": "Entit√© non trouv√©e",
            "content": {
                "application/json": {
                    "example": {"detail": "Entity with uuid 'ent-unknown' not found"}
                }
            }
        }
    }
)
async def approve_entity(
    uuid: str,
    request: ApproveEntityRequest,
    admin: dict = Depends(require_admin),
    tenant_id: str = Depends(get_tenant_id)
):
    """
    Approuve une entit√© pending ‚Üí validated.

    **Phase 3 - Admin Action**

    Actions:
    1. Change status: pending ‚Üí validated
    2. Optionnel: Ajoute entit√© √† l'ontologie YAML correspondante

    Args:
        uuid: UUID entit√©
        request: Options approbation
        admin: Admin user (authenticated)
        tenant_id: Tenant ID (from header)

    Returns:
        EntityResponse: Entit√© approuv√©e

    Raises:
        404: Entit√© non trouv√©e
        400: Entit√© d√©j√† validated
    """
    logger.info(
        f"‚úÖ POST /entities/{uuid}/approve - admin={admin['email']}, "
        f"add_to_ontology={request.add_to_ontology}"
    )

    kg_service = KnowledgeGraphService(tenant_id=tenant_id)

    try:
        # R√©cup√©rer entit√©
        query_get = """
        MATCH (e:Entity {uuid: $uuid, tenant_id: $tenant_id})
        RETURN e
        """

        with kg_service.driver.session() as session:
            result = session.run(query_get, uuid=uuid, tenant_id=tenant_id)
            record = result.single()

            if not record:
                raise HTTPException(
                    status_code=404,
                    detail=f"Entity with uuid '{uuid}' not found"
                )

            node = record["e"]

            # V√©rifier status actuel
            current_status = node.get("status", "pending")
            if current_status == "validated":
                raise HTTPException(
                    status_code=400,
                    detail="Entity already validated"
                )

            # Approuver: changer status
            query_approve = """
            MATCH (e:Entity {uuid: $uuid, tenant_id: $tenant_id})
            SET e.status = 'validated',
                e.validated_by = $admin_email,
                e.validated_at = datetime()
            RETURN e
            """

            result_approve = session.run(
                query_approve,
                uuid=uuid,
                tenant_id=tenant_id,
                admin_email=admin["email"]
            )
            updated_node = result_approve.single()["e"]

            # Optionnel: Ajouter √† ontologie YAML
            if request.add_to_ontology:
                try:
                    _add_entity_to_ontology(
                        entity_type=node["entity_type"],
                        entity_name=node["name"],
                        description=request.ontology_description
                    )
                    logger.info(
                        f"üìù Entit√© ajout√©e √† ontologie: {node['entity_type']}/{node['name']}"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur ajout ontologie: {e}")
                    # Continue quand m√™me (entit√© approuv√©e)

            logger.info(f"‚úÖ Entit√© approuv√©e: {uuid}")

            # Convertir en EntityResponse
            return EntityResponse(
                uuid=updated_node["uuid"],
                name=updated_node["name"],
                entity_type=updated_node["entity_type"],
                description=updated_node.get("description"),
                confidence=updated_node.get("confidence", 1.0),
                attributes=updated_node.get("attributes", {}),
                tenant_id=updated_node["tenant_id"],
                status=updated_node.get("status", "pending"),
                is_cataloged=updated_node.get("is_cataloged", False),
                created_at=updated_node["created_at"].to_native(),
                updated_at=updated_node["updated_at"].to_native() if updated_node.get("updated_at") else None
            )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur approbation entit√©: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to approve entity: {str(e)}"
        )
    finally:
        kg_service.close()


@router.post("/{source_uuid}/merge")
async def merge_entities(
    source_uuid: str,
    request: MergeEntitiesRequest,
    admin: dict = Depends(require_admin),
    tenant_id: str = Depends(get_tenant_id)
):
    """
    Fusionne deux entit√©s (source ‚Üí target).

    **Phase 3 - Admin Action**

    Actions:
    1. Transf√®re toutes les relations de source vers target
    2. Supprime entit√© source
    3. Optionnel: Renomme entit√© cible

    Args:
        source_uuid: UUID entit√© source (sera supprim√©e)
        request: UUID target + options
        admin: Admin user (authenticated)
        tenant_id: Tenant ID (from header)

    Returns:
        dict: R√©sultat fusion avec stats

    Raises:
        404: Une des entit√©s non trouv√©e
        400: Tentative fusion m√™me entit√©
    """
    logger.info(
        f"üîÄ POST /entities/{source_uuid}/merge ‚Üí {request.target_uuid} "
        f"- admin={admin['email']}"
    )

    if source_uuid == request.target_uuid:
        raise HTTPException(
            status_code=400,
            detail="Cannot merge entity with itself"
        )

    kg_service = KnowledgeGraphService(tenant_id=tenant_id)

    try:
        with kg_service.driver.session() as session:
            # V√©rifier existence des deux entit√©s
            query_check = """
            MATCH (source:Entity {uuid: $source_uuid, tenant_id: $tenant_id})
            MATCH (target:Entity {uuid: $target_uuid, tenant_id: $tenant_id})
            RETURN source, target
            """

            result_check = session.run(
                query_check,
                source_uuid=source_uuid,
                target_uuid=request.target_uuid,
                tenant_id=tenant_id
            )
            record_check = result_check.single()

            if not record_check:
                raise HTTPException(
                    status_code=404,
                    detail="Source or target entity not found"
                )

            # Transf√©rer relations sortantes: (source)-[r]->(other) ‚Üí (target)-[r]->(other)
            query_transfer_out = """
            MATCH (source:Entity {uuid: $source_uuid, tenant_id: $tenant_id})-[r]->(other)
            MATCH (target:Entity {uuid: $target_uuid, tenant_id: $tenant_id})
            WHERE NOT (target)-[]->(other)
            CREATE (target)-[r2:RELATION]->(other)
            SET r2 = properties(r)
            DELETE r
            RETURN count(r) as transferred_out
            """

            result_out = session.run(
                query_transfer_out,
                source_uuid=source_uuid,
                target_uuid=request.target_uuid,
                tenant_id=tenant_id
            )
            transferred_out = result_out.single()["transferred_out"]

            # Transf√©rer relations entrantes: (other)-[r]->(source) ‚Üí (other)-[r]->(target)
            query_transfer_in = """
            MATCH (other)-[r]->(source:Entity {uuid: $source_uuid, tenant_id: $tenant_id})
            MATCH (target:Entity {uuid: $target_uuid, tenant_id: $tenant_id})
            WHERE NOT (other)-[]->(target)
            CREATE (other)-[r2:RELATION]->(target)
            SET r2 = properties(r)
            DELETE r
            RETURN count(r) as transferred_in
            """

            result_in = session.run(
                query_transfer_in,
                source_uuid=source_uuid,
                target_uuid=request.target_uuid,
                tenant_id=tenant_id
            )
            transferred_in = result_in.single()["transferred_in"]

            # Optionnel: Renommer entit√© cible
            if request.canonical_name:
                query_rename = """
                MATCH (target:Entity {uuid: $target_uuid, tenant_id: $tenant_id})
                SET target.name = $canonical_name
                """
                session.run(
                    query_rename,
                    target_uuid=request.target_uuid,
                    tenant_id=tenant_id,
                    canonical_name=request.canonical_name
                )

            # Supprimer entit√© source
            query_delete_source = """
            MATCH (source:Entity {uuid: $source_uuid, tenant_id: $tenant_id})
            DELETE source
            """
            session.run(query_delete_source, source_uuid=source_uuid, tenant_id=tenant_id)

            logger.info(
                f"‚úÖ Fusion r√©ussie: {source_uuid} ‚Üí {request.target_uuid} "
                f"(relations transf√©r√©es: {transferred_out + transferred_in})"
            )

            return {
                "status": "merged",
                "source_uuid": source_uuid,
                "target_uuid": request.target_uuid,
                "relations_transferred": transferred_out + transferred_in,
                "canonical_name": request.canonical_name
            }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur fusion entit√©s: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to merge entities: {str(e)}"
        )
    finally:
        kg_service.close()


@router.delete("/{uuid}")
async def delete_entity_cascade(
    uuid: str,
    cascade: bool = Query(
        default=True,
        description="Supprimer aussi toutes les relations (cascade delete)"
    ),
    admin: dict = Depends(require_admin),
    tenant_id: str = Depends(get_tenant_id)
):
    """
    Supprime une entit√© avec cascade delete optionnel.

    **Phase 3 - Admin Action**

    Actions:
    1. Si cascade=True: Supprime toutes les relations li√©es
    2. Supprime l'entit√©
    3. Audit trail (logged)

    Args:
        uuid: UUID entit√©
        cascade: Supprimer relations (d√©faut True)
        admin: Admin user (authenticated)
        tenant_id: Tenant ID (from header)

    Returns:
        dict: R√©sultat suppression avec stats

    Raises:
        404: Entit√© non trouv√©e
    """
    logger.info(
        f"üóëÔ∏è DELETE /entities/{uuid} - cascade={cascade}, admin={admin['email']}"
    )

    kg_service = KnowledgeGraphService(tenant_id=tenant_id)

    try:
        with kg_service.driver.session() as session:
            # V√©rifier existence
            query_check = """
            MATCH (e:Entity {uuid: $uuid, tenant_id: $tenant_id})
            RETURN e
            """

            result_check = session.run(query_check, uuid=uuid, tenant_id=tenant_id)
            if not result_check.single():
                raise HTTPException(
                    status_code=404,
                    detail=f"Entity with uuid '{uuid}' not found"
                )

            # Compter relations avant suppression
            query_count_relations = """
            MATCH (e:Entity {uuid: $uuid, tenant_id: $tenant_id})
            OPTIONAL MATCH (e)-[r]-()
            RETURN count(r) as relation_count
            """

            result_count = session.run(query_count_relations, uuid=uuid, tenant_id=tenant_id)
            relation_count = result_count.single()["relation_count"]

            # Supprimer
            if cascade:
                query_delete = """
                MATCH (e:Entity {uuid: $uuid, tenant_id: $tenant_id})
                DETACH DELETE e
                """
            else:
                query_delete = """
                MATCH (e:Entity {uuid: $uuid, tenant_id: $tenant_id})
                DELETE e
                """

            session.run(query_delete, uuid=uuid, tenant_id=tenant_id)

            logger.info(
                f"‚úÖ Entit√© supprim√©e: {uuid} (cascade={cascade}, "
                f"relations supprim√©es={relation_count if cascade else 0})"
            )

            return {
                "status": "deleted",
                "uuid": uuid,
                "cascade": cascade,
                "relations_deleted": relation_count if cascade else 0,
                "deleted_by": admin["email"]
            }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur suppression entit√©: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to delete entity: {str(e)}"
        )
    finally:
        kg_service.close()


def _add_entity_to_ontology(
    entity_type: str,
    entity_name: str,
    description: Optional[str] = None
) -> None:
    """
    Ajoute une entit√© √† l'ontologie YAML correspondante.

    **Helper Phase 3**

    Trouve le fichier ontologie correspondant au type et ajoute l'entit√©.

    Args:
        entity_type: Type entit√© (ex: SOLUTION, COMPONENT)
        entity_name: Nom entit√©
        description: Description (optionnel)

    Raises:
        FileNotFoundError: Fichier ontologie non trouv√©
        ValueError: Format ontologie invalide
    """
    # Mapper type ‚Üí fichier ontologie
    type_to_file = {
        "SOLUTION": "solutions.yaml",
        "COMPONENT": "components.yaml",
        "TECHNOLOGY": "technologies.yaml",
        "CONCEPT": "concepts.yaml",
        "ORGANIZATION": "organizations.yaml",
        "PERSON": "persons.yaml"
    }

    ontology_file = type_to_file.get(entity_type.upper())
    if not ontology_file:
        raise ValueError(f"No ontology file mapped for type: {entity_type}")

    ontology_path = settings.ontologies_dir / ontology_file

    if not ontology_path.exists():
        raise FileNotFoundError(f"Ontology file not found: {ontology_path}")

    # Charger ontologie
    with open(ontology_path, "r", encoding="utf-8") as f:
        ontology = yaml.safe_load(f) or {}

    # Ajouter entit√©
    entity_id = entity_name.upper().replace(" ", "_").replace("/", "_")

    if "entities" not in ontology:
        ontology["entities"] = {}

    ontology["entities"][entity_id] = {
        "name": entity_name,
        "aliases": [entity_name],
        "description": description or f"Entity added from admin approval",
        "category": "user-approved"
    }

    # Sauvegarder
    with open(ontology_path, "w", encoding="utf-8") as f:
        yaml.dump(ontology, f, allow_unicode=True, sort_keys=False)

    logger.info(f"üìù Entit√© ajout√©e √† {ontology_file}: {entity_id}")


class ChangeEntityTypeRequest(BaseModel):
    """Requ√™te changement type entit√©."""

    new_entity_type: str = Field(
        ...,
        description="Nouveau type d'entit√© (ex: SOLUTION, COMPONENT, etc.)"
    )


@router.patch("/{entity_uuid}/change-type")
async def change_entity_type(
    entity_uuid: str,
    new_entity_type: str = Body(..., embed=True),
    admin: dict = Depends(require_admin),
    tenant_id: str = Depends(get_tenant_id)
):
    """
    Change le type d'une entit√©.

    Utile quand le LLM a mal classifi√© une entit√© lors de l'extraction.

    Args:
        entity_uuid: UUID de l'entit√©
        request: Nouveau type d'entit√©
        admin: Admin authentifi√©
        tenant_id: Tenant ID

    Returns:
        Entit√© mise √† jour
    """
    logger.info(f"üîÑ Changement type entit√© {entity_uuid} ‚Üí {new_entity_type}")

    from neo4j import GraphDatabase
    import os

    neo4j_uri = os.getenv("NEO4J_URI", "bolt://neo4j:7687")
    neo4j_user = os.getenv("NEO4J_USER", "neo4j")
    neo4j_password = os.getenv("NEO4J_PASSWORD", "password")

    driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_user, neo4j_password))

    try:
        with driver.session() as session:
            # R√©cup√©rer entit√© actuelle et changer son type
            query = """
            MATCH (e:Entity {uuid: $uuid, tenant_id: $tenant_id})
            WITH e, e.entity_type AS old_type
            SET e.entity_type = $new_type,
                e.updated_at = datetime()
            RETURN e, old_type
            """

            result = session.run(
                query,
                uuid=entity_uuid,
                tenant_id=tenant_id,
                new_type=new_entity_type.upper()
            )

            record = result.single()
            if not record:
                driver.close()
                raise HTTPException(status_code=404, detail="Entity not found")

            node = record["e"]
            old_type = record["old_type"]

        driver.close()

        logger.info(
            f"‚úÖ Type chang√©: {entity_uuid} de {old_type} ‚Üí {new_entity_type}"
        )

        # Retourner entit√© mise √† jour
        updated_entity = dict(node)

        # Convertir Neo4j DateTime en Python datetime si n√©cessaire
        created_at = updated_entity.get("created_at")
        if hasattr(created_at, 'to_native'):
            created_at = created_at.to_native()

        return EntityResponse(
            uuid=updated_entity["uuid"],
            name=updated_entity["name"],
            entity_type=updated_entity["entity_type"],
            canonical_name=updated_entity.get("canonical_name"),
            description=updated_entity.get("description", ""),
            confidence=updated_entity.get("confidence", 1.0),
            status=updated_entity.get("status", "pending"),
            is_cataloged=updated_entity.get("is_cataloged", False),
            created_at=created_at,
            tenant_id=updated_entity.get("tenant_id", "default")
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur changement type: {e}")
        raise HTTPException(status_code=500, detail=str(e))


__all__ = ["router"]
