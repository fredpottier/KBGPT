"""
Service de bootstrap automatique Knowledge Graph
Auto-promotion d'entitÃ©s candidates frÃ©quentes en entitÃ©s seed canoniques
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from collections import defaultdict

from knowbase.canonicalization.schemas import (
    EntityCandidate,
    EntityCandidateStatus,
    BootstrapConfig,
    BootstrapResult,
    BootstrapProgress
)
from knowbase.common.redis_lock import create_lock

logger = logging.getLogger(__name__)


class KGBootstrapService:
    """
    Service de bootstrap automatique du Knowledge Graph

    Promeut automatiquement les entitÃ©s candidates frÃ©quentes (â‰¥min_occurrences)
    et confiantes (â‰¥min_confidence) en entitÃ©s seed canoniques.
    """

    def __init__(self):
        """Initialise le service bootstrap"""
        # Lazy import pour Ã©viter import circulaire
        from knowbase.api.services.knowledge_graph import KnowledgeGraphService
        self.kg_service = KnowledgeGraphService()
        self._progress: Optional[BootstrapProgress] = None

    async def get_candidates(
        self,
        group_id: Optional[str] = None,
        entity_types: Optional[List[str]] = None,
        status: EntityCandidateStatus = EntityCandidateStatus.CANDIDATE
    ) -> List[EntityCandidate]:
        """
        RÃ©cupÃ¨re les entitÃ©s candidates depuis le KG

        Args:
            group_id: Filtrer par groupe (None = tous)
            entity_types: Filtrer par types d'entitÃ©s
            status: Filtrer par statut

        Returns:
            Liste d'entitÃ©s candidates

        Note:
            PHASE 3 TODO: Actuellement retourne liste vide car extraction auto
            n'est pas encore implÃ©mentÃ©e. Cette mÃ©thode sera remplacÃ©e par
            une vraie requÃªte vers le systÃ¨me d'extraction quand Phase 3 sera faite.
        """
        # TODO PHASE 3: Remplacer par vraie requÃªte vers systÃ¨me extraction
        # Pour l'instant, retourne liste vide car extraction non implÃ©mentÃ©e
        logger.warning(
            "get_candidates() retourne liste vide - "
            "Phase 3 (Extraction Auto EntitÃ©s) non encore implÃ©mentÃ©e"
        )
        return []

    async def auto_bootstrap_from_candidates(
        self,
        config: BootstrapConfig
    ) -> BootstrapResult:
        """
        Bootstrap automatique: promeut candidates frÃ©quentes en seeds

        Logique:
            - RÃ©cupÃ¨re toutes les candidates avec status=CANDIDATE
            - Filtre selon min_occurrences et min_confidence
            - Promeut les entitÃ©s qualifiÃ©es en status=SEED
            - CrÃ©e les entitÃ©s canoniques correspondantes dans le KG

        P0.2 PROTECTION: Lock distribuÃ© Redis prÃ©vient double bootstrap concurrent

        Args:
            config: Configuration bootstrap (seuils, filtres, dry_run)

        Returns:
            RÃ©sultat du bootstrap avec statistiques

        Raises:
            ValueError: Si configuration invalide
            RuntimeError: Si erreur durant le bootstrap
            TimeoutError: Si lock non acquis (bootstrap dÃ©jÃ  en cours ailleurs)
        """
        start_time = datetime.utcnow()

        logger.info(
            f"DÃ©marrage bootstrap: min_occ={config.min_occurrences}, "
            f"min_conf={config.min_confidence}, dry_run={config.dry_run}"
        )

        # P0.2: AcquÃ©rir lock distribuÃ© pour Ã©viter bootstrap concurrent
        # TTL 10min (bootstrap peut prendre plusieurs minutes si 10k+ candidates)
        lock = create_lock(
            redis_url="redis://redis:6379/5",
            lock_key="bootstrap:global",
            ttl_seconds=600  # 10min
        )

        # Initialiser la progression
        self._progress = BootstrapProgress(
            status="running",
            processed=0,
            total=0,
            promoted=0,
            started_at=start_time
        )

        # Utiliser context manager pour auto-release mÃªme si exception
        with lock.context(timeout=30):
            logger.info("ðŸ”’ Lock bootstrap acquis - dÃ©but traitement")

            try:
                # 1. RÃ©cupÃ©rer les candidates
                candidates = await self.get_candidates(
                    group_id=config.group_id,
                    entity_types=config.entity_types,
                    status=EntityCandidateStatus.CANDIDATE
                )

                self._progress.total = len(candidates)
                logger.info(f"Candidates rÃ©cupÃ©rÃ©es: {len(candidates)}")

                # 2. Filtrer les candidates qualifiÃ©es
                qualified = [
                    c for c in candidates
                    if c.occurrences >= config.min_occurrences
                    and c.confidence >= config.min_confidence
                ]

                logger.info(
                    f"Candidates qualifiÃ©es pour promotion: {len(qualified)} "
                    f"(sur {len(candidates)} analysÃ©es)"
                )

                # 3. Promouvoir les candidates en seeds
                promoted_ids = []
                by_type: Dict[str, int] = defaultdict(int)

                for idx, candidate in enumerate(qualified):
                    self._progress.processed = idx + 1
                    self._progress.current_entity = candidate.name

                    try:
                        if not config.dry_run:
                            # CrÃ©er l'entitÃ© canonique dans le KG
                            seed_id = await self._promote_to_seed(candidate)
                            promoted_ids.append(seed_id)
                            by_type[candidate.entity_type] += 1
                            self._progress.promoted += 1

                            logger.info(
                                f"Seed promue: {candidate.name} ({candidate.entity_type}) "
                                f"[occ={candidate.occurrences}, conf={candidate.confidence:.2f}]"
                            )
                        else:
                            # Mode dry-run: simuler seulement
                            promoted_ids.append(f"dry_run_{candidate.name}")
                            by_type[candidate.entity_type] += 1
                            self._progress.promoted += 1

                            logger.info(
                                f"[DRY RUN] Seed promue: {candidate.name} ({candidate.entity_type})"
                            )

                    except Exception as e:
                        logger.error(
                            f"Erreur promotion candidate {candidate.name}: {e}",
                            exc_info=True
                        )
                        # Continue avec les autres candidates

                # 4. Finaliser
                duration = (datetime.utcnow() - start_time).total_seconds()

                self._progress.status = "completed"

                result = BootstrapResult(
                    total_candidates=len(candidates),
                    promoted_seeds=len(promoted_ids),
                    seed_ids=promoted_ids,
                    duration_seconds=duration,
                    dry_run=config.dry_run,
                    by_entity_type=dict(by_type)
                )

                logger.info(
                    f"âœ… Bootstrap terminÃ©: {len(promoted_ids)} seeds promues "
                    f"en {duration:.2f}s (dry_run={config.dry_run})"
                )
                logger.info("ðŸ”“ Lock bootstrap libÃ©rÃ© automatiquement")

                return result

            except Exception as e:
                self._progress.status = "failed"
                logger.error(f"Erreur durant bootstrap: {e}", exc_info=True)
                logger.info("ðŸ”“ Lock bootstrap libÃ©rÃ© automatiquement (aprÃ¨s erreur)")
                raise RuntimeError(f"Bootstrap Ã©chouÃ©: {e}") from e

    async def _promote_to_seed(self, candidate: EntityCandidate) -> str:
        """
        Promeut une candidate en seed canonique dans le KG

        Args:
            candidate: EntitÃ© candidate Ã  promouvoir

        Returns:
            ID de l'entitÃ© seed crÃ©Ã©e

        Raises:
            ValueError: Si type d'entitÃ© invalide
            RuntimeError: Si erreur crÃ©ation entitÃ©
        """
        # Lazy imports pour Ã©viter import circulaire
        from knowbase.api.schemas.knowledge_graph import EntityCreate, EntityType

        # Mapper le type string vers EntityType enum
        try:
            entity_type_enum = EntityType(candidate.entity_type.lower())
        except ValueError:
            # Fallback vers CONCEPT si type inconnu
            logger.warning(
                f"Type d'entitÃ© inconnu '{candidate.entity_type}', "
                f"fallback vers CONCEPT"
            )
            entity_type_enum = EntityType.CONCEPT

        # CrÃ©er l'entitÃ© dans le KG avec attributs bootstrap
        entity_create = EntityCreate(
            name=candidate.name,
            entity_type=entity_type_enum,
            description=candidate.description or f"EntitÃ© seed auto-promue (bootstrap)",
            attributes={
                **candidate.attributes,
                "bootstrap": True,
                "bootstrap_confidence": candidate.confidence,
                "bootstrap_occurrences": candidate.occurrences,
                "bootstrap_date": datetime.utcnow().isoformat(),
                "source_chunks": candidate.source_chunks
            }
        )

        # CrÃ©er l'entitÃ© via le KG service
        entity_response = await self.kg_service.create_entity(entity_create)

        # TODO PHASE 3: Marquer la candidate comme SEED dans le systÃ¨me d'extraction
        # Pour l'instant, juste logger
        logger.debug(
            f"Candidate {candidate.name} promue en seed avec ID {entity_response.uuid}"
        )

        return entity_response.uuid

    def get_progress(self) -> Optional[BootstrapProgress]:
        """
        RÃ©cupÃ¨re la progression du bootstrap en cours

        Returns:
            Progression actuelle ou None si aucun bootstrap en cours
        """
        return self._progress

    async def estimate_bootstrap(self, config: BootstrapConfig) -> Dict[str, Any]:
        """
        Estime le nombre d'entitÃ©s qui seraient promues (sans modifier)

        Args:
            config: Configuration bootstrap (avec dry_run=True)

        Returns:
            Dict avec estimation {
                "qualified_candidates": int,
                "by_entity_type": Dict[str, int],
                "estimated_duration_seconds": float
            }
        """
        # Forcer dry_run pour estimation
        config_dict = config.model_dump()
        config_dict["dry_run"] = True
        config_estimate = BootstrapConfig(**config_dict)

        result = await self.auto_bootstrap_from_candidates(config_estimate)

        return {
            "qualified_candidates": result.promoted_seeds,
            "by_entity_type": result.by_entity_type,
            "estimated_duration_seconds": result.duration_seconds
        }
